# IMPROVED GITHUB ACTIONS - Compensates for timing irregularities
name: Auto-Fetch Historical Data

on:
  schedule:
    # Multiple overlapping schedules to ensure coverage
    - cron: '*/5 3-13 * * 1-5'   # Primary: Every 5 minutes
    - cron: '2,7,12,17,22,27,32,37,42,47,52,57 3-13 * * 1-5'  # Backup: Offset by 2 minutes
  
  workflow_dispatch:

jobs:
  fetch-historical-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if within trading hours and prevent duplicates
        id: check_time
        run: |
          CURRENT_HOUR=$(TZ='Asia/Kolkata' date +'%H')
          CURRENT_MINUTE=$(TZ='Asia/Kolkata' date +'%M')
          CURRENT_DAY=$(TZ='Asia/Kolkata' date +'%u')
          
          echo "Current IST: $(TZ='Asia/Kolkata' date)"
          
          # Check if it's a weekday
          if [ $CURRENT_DAY -gt 5 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "reason=Weekend" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check trading hours (9:05 AM to 6:30 PM IST)
          if [ $CURRENT_HOUR -lt 9 ] || [ $CURRENT_HOUR -gt 18 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "reason=Outside trading hours" >> $GITHUB_OUTPUT
          elif [ $CURRENT_HOUR -eq 9 ] && [ $CURRENT_MINUTE -lt 5 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "reason=Before 9:05 AM" >> $GITHUB_OUTPUT
          elif [ $CURRENT_HOUR -eq 18 ] && [ $CURRENT_MINUTE -gt 30 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "reason=After 6:30 PM" >> $GITHUB_OUTPUT
          else
            # ‚úÖ ENHANCED: Check for recent executions to prevent duplicates
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "reason=Trading hours" >> $GITHUB_OUTPUT
            echo "duplicate_check=needed" >> $GITHUB_OUTPUT
          fi

      - name: Call Supabase Edge Function with duplicate prevention
        if: steps.check_time.outputs.should_run == 'true'
        run: |
          echo "üîÑ Calling Edge Function at $(TZ='Asia/Kolkata' date)"
          
          # Add unique timestamp to help with deduplication
          UNIQUE_TIMESTAMP=$(date +%s)
          
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -d '{
              "trigger": "github_actions", 
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "run_id": "'${{ github.run_id }}'",
              "attempt": "'${{ github.run_attempt }}'",
              "unique_id": "'$UNIQUE_TIMESTAMP'"
            }' \
            -w "\nHTTP_STATUS:%{http_code}" \
            -s \
            "https://kowxpazskkigzwdwzwyq.supabase.co/functions/v1/auto-fetch-historical")
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS/d')
          
          echo "üìä Response Status: $HTTP_STATUS"
          echo "üìÑ Response Body: $BODY"
          
          # Enhanced error reporting
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Edge Function executed successfully"
            # Extract metrics from response
            PROCESSED=$(echo "$BODY" | grep -o '"processedSymbols":[0-9]*' | cut -d: -f2)
            RECORDS=$(echo "$BODY" | grep -o '"totalRecords":[0-9]*' | cut -d: -f2)
            echo "üìà Processed: $PROCESSED symbols, $RECORDS records"
          else
            echo "‚ùå Edge Function call failed with status $HTTP_STATUS"
            echo "üîç Debugging info: GitHub Run ID: ${{ github.run_id }}"
            exit 1
          fi

      - name: Log skipped execution  
        if: steps.check_time.outputs.should_run == 'false'
        run: |
          echo "‚è≠Ô∏è Skipped: ${{ steps.check_time.outputs.reason }}"
          echo "üïê Current time (IST): $(TZ='Asia/Kolkata' date)"
          echo "‚è∞ Next potential run: $(TZ='Asia/Kolkata' date -d '+5 minutes' +'%H:%M IST')"
